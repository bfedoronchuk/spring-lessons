package com.learn.spring.demo.controllers;

import com.learn.spring.demo.entities.VulnerabilityCategory;
import com.learn.spring.demo.exceptions.ApiError;
import com.learn.spring.demo.exceptions.EntityAlreadyExistsException;
import com.learn.spring.demo.exceptions.InvalidFormatException;
import com.learn.spring.demo.services.VulnerabilityCategoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("vulnerability-category")
public class VulnerabilityCategoryController {
    private final VulnerabilityCategoryService vulnerabilityCategoryService;

    @Autowired
    public VulnerabilityCategoryController(VulnerabilityCategoryService vulnerabilityCategoryService) {
        this.vulnerabilityCategoryService = vulnerabilityCategoryService;
    }

    @PostMapping
    public ResponseEntity add(@RequestBody VulnerabilityCategory category) {
        try {
            VulnerabilityCategory savedCategory = vulnerabilityCategoryService.save(category);
            return ResponseEntity.ok(savedCategory);
        } catch (EntityAlreadyExistsException ex) {
            ApiError apiError = new ApiError(ex.getMessage());
            return ResponseEntity.status(HttpStatus.CONFLICT).body(apiError);
        } catch (InvalidFormatException ex) {
            ApiError apiError = new ApiError(ex.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(apiError);
        }

    }

    @GetMapping
    public List<VulnerabilityCategory> getAll(){
        return this.vulnerabilityCategoryService.getAll();
    }
}
